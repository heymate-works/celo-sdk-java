package org.celo.contractkit.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class SortedOracles extends Contract {
    public static final String BINARY = "0x608060405260006100146100b760201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100bf565b600033905090565b613a9480620000cf6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638e749281116100c3578063ebc1d6bb1161007c578063ebc1d6bb14610882578063ef90e1b0146108b0578063f0ca4adb1461090f578063f2fde38b14610973578063fe4b84df146109b7578063ffe736bf146109e55761014d565b80638e7492811461056a5780638f32d59b14610603578063a00a8b2c14610625578063b9292158146106b3578063bbc66a94146107dc578063dd34ca3b146108345761014d565b806353a572971161011557806353a572971461038f57806354255be0146103fd5780636dd6ef0c14610430578063715018a61461048857806380e50744146104925780638da5cb5b146105205761014d565b806302f55b6114610152578063071b48fc1461027b578063158ef93e146102d3578063370c998e146102f5578063493a353c14610371575b600080fd5b6101946004803603602081101561016857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a74565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156101df5780820151818401526020810190506101c4565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610221578082015181840152602081019050610206565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610263578082015181840152602081019050610248565b50505050905001965050505050505060405180910390f35b6102bd6004803603602081101561029157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d10565b6040518082815260200191505060405180910390f35b6102db610de3565b604051808215151515815260200191505060405180910390f35b6103576004803603604081101561030b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610df6565b604051808215151515815260200191505060405180910390f35b610379610e25565b6040518082815260200191505060405180910390f35b6103fb600480360360608110156103a557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e2b565b005b610405611367565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b6104726004803603602081101561044657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061138e565b6040518082815260200191505060405180910390f35b610490611461565b005b61051e600480360360808110156104a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061159a565b005b610528611f71565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105ac6004803603602081101561058057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f9a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105ef5780820151818401526020810190506105d4565b505050509050019250505060405180910390f35b61060b612067565b604051808215151515815260200191505060405180910390f35b6106716004803603604081101561063b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506120c5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106f5600480360360208110156106c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612110565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610740578082015181840152602081019050610725565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610782578082015181840152602081019050610767565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156107c45780820151818401526020810190506107a9565b50505050905001965050505050505060405180910390f35b61081e600480360360208110156107f257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123ac565b6040518082815260200191505060405180910390f35b6108806004803603604081101561084a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061247f565b005b6108ae6004803603602081101561089857600080fd5b8101908080359060200190929190505050612635565b005b6108f2600480360360208110156108c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127a4565b604051808381526020018281526020019250505060405180910390f35b6109716004803603604081101561092557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061289d565b005b6109b56004803603602081101561098957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bff565b005b6109e3600480360360208110156109cd57600080fd5b8101908080359060200190929190505050612c85565b005b610a27600480360360208110156109fb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d38565b60405180831515151581526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b6060806060600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636cfa387390916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b158015610b0857600080fd5b505af4158015610b1c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506060811015610b4657600080fd5b8101908080516040519392919084640100000000821115610b6657600080fd5b83820191506020820185811115610b7c57600080fd5b8251866020820283011164010000000082111715610b9957600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610bd0578082015181840152602081019050610bb5565b5050505090500160405260200180516040519392919084640100000000821115610bf957600080fd5b83820191506020820185811115610c0f57600080fd5b8251866020820283011164010000000082111715610c2c57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610c63578082015181840152602081019050610c48565b5050505090500160405260200180516040519392919084640100000000821115610c8c57600080fd5b83820191506020820185811115610ca257600080fd5b8251866020820283011164010000000082111715610cbf57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610cf6578082015181840152602081019050610cdb565b505050509050016040525050509250925092509193909250565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610da157600080fd5b505af4158015610db5573d6000803e3d6000fd5b505050506040513d6020811015610dcb57600080fd5b81019080805190602001909291905050509050919050565b600060149054906101000a900460ff1681565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60055481565b610e33612067565b610ea5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610f0f5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015610f5c575080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050115b801561100757508173ffffffffffffffffffffffffffffffffffffffff16600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610fc457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61105c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260568152602001806139466056913960600191505060405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206111866001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050612f7d90919063ffffffff16565b8154811061119057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061120557fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112a36001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050612f7d90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816112ed919061389a565b506112f88383612fc7565b156113085761130783836131d5565b5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f6dc84b66cc948d847632b9d829f7cb1cb904fbf2c084554a9bc22ad9d845334060405160405180910390a3505050565b60008060008060018060016000839350829250819150809050935093509350935090919293565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636eafa6c390916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561141f57600080fd5b505af4158015611433573d6000803e3d6000fd5b505050506040513d602081101561144957600080fd5b81019080805190602001909291905050509050919050565b611469612067565b6114db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b83600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661167a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806139f66027913960400191505060405180910390fd5b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561170b57600080fd5b505af415801561171f573d6000803e3d6000fd5b505050506040513d602081101561173557600080fd5b81019080805190602001909291905050509050600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6395073a799091336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561180b57600080fd5b505af415801561181f573d6000803e3d6000fd5b505050506040513d602081101561183557600080fd5b810190808051906020019092919050505015611a7657600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63832a21479091338888886040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060006040518083038186803b15801561197e57600080fd5b505af4158015611992573d6000803e3d6000fd5b50505050600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63c1e728e99091336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b158015611a5957600080fd5b505af4158015611a6d573d6000803e3d6000fd5b50505050611bc2565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63d4a092729091338888886040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060006040518083038186803b158015611ba957600080fd5b505af4158015611bbd573d6000803e3d6000fd5b505050505b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63d4a0927290913342600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____630944c59490916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611cae57600080fd5b505af4158015611cc2573d6000803e3d6000fd5b505050506040513d6020811015611cd857600080fd5b810190808051906020019092919050505060006040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060006040518083038186803b158015611dbf57600080fd5b505af4158015611dd3573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f7cebb17173a9ed273d2b7538f64395c0ebf352ff743f1cf8ce66b437a61442134288604051808381526020018281526020019250505060405180910390a36000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611ed557600080fd5b505af4158015611ee9573d6000803e3d6000fd5b505050506040513d6020811015611eff57600080fd5b81019080805190602001909291905050509050818114611f68578673ffffffffffffffffffffffffffffffffffffffff167fa9981ebfc3b766a742486e898f54959b050a66006dbce1a4155c1f84a08bcf41826040518082815260200191505060405180910390a25b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561205b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612011575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166120a9613606565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b600460205281600052604060002081815481106120de57fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060806060600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636cfa387390916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b1580156121a457600080fd5b505af41580156121b8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060608110156121e257600080fd5b810190808051604051939291908464010000000082111561220257600080fd5b8382019150602082018581111561221857600080fd5b825186602082028301116401000000008211171561223557600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561226c578082015181840152602081019050612251565b505050509050016040526020018051604051939291908464010000000082111561229557600080fd5b838201915060208201858111156122ab57600080fd5b82518660208202830111640100000000821117156122c857600080fd5b8083526020830192505050908051906020019060200280838360005b838110156122ff5780820151818401526020810190506122e4565b505050509050016040526020018051604051939291908464010000000082111561232857600080fd5b8382019150602082018581111561233e57600080fd5b825186602082028301116401000000008211171561235b57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015612392578082015181840152602081019050612377565b505050509050016040525050509250925092509193909250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636eafa6c390916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561243d57600080fd5b505af4158015612451573d6000803e3d6000fd5b505050506040513d602081101561246757600080fd5b81019080805190602001909291905050509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156125845750600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____636eafa6c390916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561254657600080fd5b505af415801561255a573d6000803e3d6000fd5b505050506040513d602081101561257057600080fd5b810190808051906020019092919050505081105b6125d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806139126034913960400191505060405180910390fd5b60008090505b81811015612630576000806125f385612d38565b91509150811561260c5761260785826131d5565b612613565b5050612630565b505061262960018261360e90919063ffffffff16565b90506125df565b505050565b61263d612067565b6126af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008111612708576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613a3f6021913960400191505060405180910390fd5b600554811415612763576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613a1d6022913960400191505060405180910390fd5b806005819055507fc68a9b88effd8a11611ff410efbc83569f0031b7bc70dd455b61344c7f0a042f816040518082815260200191505060405180910390a150565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561283657600080fd5b505af415801561284a573d6000803e3d6000fd5b505050506040513d602081101561286057600080fd5b8101908080519060200190929190505050600061287c856123ac565b146128915769d3c21bcecceda1000000612894565b60005b91509150915091565b6128a5612067565b612917576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156129815750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015612a145750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b612a69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252605a81526020018061399c605a913960600191505060405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f828d2be040dede7698182e08dfa8bfbd663c879aee772509c4a2bd961d0ed43f60405160405180910390a35050565b612c07612067565b612c79576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612c8281613696565b50565b600060149054906101000a900460ff1615612d08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff021916908315150217905550612d2c33613696565b612d3581612635565b50565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612d7557600080fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63d938ec7b90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612e0657600080fd5b505af4158015612e1a573d6000803e3d6000fd5b505050506040513d6020811015612e3057600080fd5b810190808051906020019092919050505090506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____637c6bb8629091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015612f0857600080fd5b505af4158015612f1c573d6000803e3d6000fd5b505050506040513d6020811015612f3257600080fd5b81019080805190602001909291905050509050600554612f5b8242612f7d90919063ffffffff16565b10612f6e57600182935093505050612f78565b6000829350935050505b915091565b6000612fbf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506137da565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6395073a799091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561308c57600080fd5b505af41580156130a0573d6000803e3d6000fd5b505050506040513d60208110156130b657600080fd5b810190808051906020019092919050505080156131cd5750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6395073a799091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561319157600080fd5b505af41580156131a5573d6000803e3d6000fd5b505050506040513d60208110156131bb57600080fd5b81019080805190602001909291905050505b905092915050565b60016131e08361138e565b1480156131f357506131f28282612fc7565b5b156131fd57613602565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561328e57600080fd5b505af41580156132a2573d6000803e3d6000fd5b505050506040513d60208110156132b857600080fd5b81019080805190602001909291905050509050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63c1e728e99091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561338e57600080fd5b505af41580156133a2573d6000803e3d6000fd5b50505050600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____63c1e728e99091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561346957600080fd5b505af415801561347d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fe21a44017b6fa1658d84e937d56ff408501facdb4ff7427c479ac460d76f789360405160405180910390a36000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__AddressSortedLinkedListWithMedian_____6359d556a890916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561356c57600080fd5b505af4158015613580573d6000803e3d6000fd5b505050506040513d602081101561359657600080fd5b810190808051906020019092919050505090508181146135ff578373ffffffffffffffffffffffffffffffffffffffff167fa9981ebfc3b766a742486e898f54959b050a66006dbce1a4155c1f84a08bcf41826040518082815260200191505060405180910390a25b50505b5050565b600033905090565b60008082840190508381101561368c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561371c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806138ec6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000838311158290613887576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561384c578082015181840152602081019050613831565b50505050905090810190601f1680156138795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b8154818355818111156138c1578183600052602060002091820191016138c091906138c6565b5b505050565b6138e891905b808211156138e45760008160009055506001016138cc565b5090565b9056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373746f6b656e2061646472206e756c6c206f7220747279696e6720746f2072656d6f766520746f6f206d616e79207265706f727473746f6b656e2061646472206e756c6c206f72206f7261636c652061646472206e756c6c206f7220696e646578206f6620746f6b656e206f7261636c65206e6f74206d617070656420746f206f7261636c652061646472746f6b656e206164647220776173206e756c6c206f72206f7261636c65206164647220776173206e756c6c206f72206f7261636c652061646472206973206e6f7420616e206f7261636c6520666f7220746f6b656e206164647273656e64657220776173206e6f7420616e206f7261636c6520666f7220746f6b656e20616464727265706f72744578706972795365636f6e6473206861736e2774206368616e6765647265706f727420657870697279207365636f6e6473206d757374206265203e2030a265627a7a723158202a8acfd0ce283e332e2e43adbaf780aa4992538ee0c1a30dba78a4a870d6bafe64736f6c634300050d0032";

    public static final String FUNC_INITIALIZED = "initialized";

    public static final String FUNC_ISORACLE = "isOracle";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_ORACLES = "oracles";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REPORTEXPIRYSECONDS = "reportExpirySeconds";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETVERSIONNUMBER = "getVersionNumber";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_SETREPORTEXPIRY = "setReportExpiry";

    public static final String FUNC_ADDORACLE = "addOracle";

    public static final String FUNC_REMOVEORACLE = "removeOracle";

    public static final String FUNC_REMOVEEXPIREDREPORTS = "removeExpiredReports";

    public static final String FUNC_ISOLDESTREPORTEXPIRED = "isOldestReportExpired";

    public static final String FUNC_REPORT = "report";

    public static final String FUNC_NUMRATES = "numRates";

    public static final String FUNC_MEDIANRATE = "medianRate";

    public static final String FUNC_GETRATES = "getRates";

    public static final String FUNC_NUMTIMESTAMPS = "numTimestamps";

    public static final String FUNC_MEDIANTIMESTAMP = "medianTimestamp";

    public static final String FUNC_GETTIMESTAMPS = "getTimestamps";

    public static final String FUNC_GETORACLES = "getOracles";

    public static final Event MEDIANUPDATED_EVENT = new Event("MedianUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ORACLEADDED_EVENT = new Event("OracleAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ORACLEREMOVED_EVENT = new Event("OracleRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ORACLEREPORTREMOVED_EVENT = new Event("OracleReportRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ORACLEREPORTED_EVENT = new Event("OracleReported", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REPORTEXPIRYSET_EVENT = new Event("ReportExpirySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected SortedOracles(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SortedOracles(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SortedOracles(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SortedOracles(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<MedianUpdatedEventResponse> getMedianUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MEDIANUPDATED_EVENT, transactionReceipt);
        ArrayList<MedianUpdatedEventResponse> responses = new ArrayList<MedianUpdatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MedianUpdatedEventResponse typedResponse = new MedianUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MedianUpdatedEventResponse> medianUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MedianUpdatedEventResponse>() {
            @Override
            public MedianUpdatedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MEDIANUPDATED_EVENT, log);
                MedianUpdatedEventResponse typedResponse = new MedianUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MedianUpdatedEventResponse> medianUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MEDIANUPDATED_EVENT));
        return medianUpdatedEventFlowable(filter);
    }

    public List<OracleAddedEventResponse> getOracleAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORACLEADDED_EVENT, transactionReceipt);
        ArrayList<OracleAddedEventResponse> responses = new ArrayList<OracleAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OracleAddedEventResponse typedResponse = new OracleAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.oracleAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OracleAddedEventResponse> oracleAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OracleAddedEventResponse>() {
            @Override
            public OracleAddedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORACLEADDED_EVENT, log);
                OracleAddedEventResponse typedResponse = new OracleAddedEventResponse();
                typedResponse.log = log;
                typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.oracleAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OracleAddedEventResponse> oracleAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORACLEADDED_EVENT));
        return oracleAddedEventFlowable(filter);
    }

    public List<OracleRemovedEventResponse> getOracleRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORACLEREMOVED_EVENT, transactionReceipt);
        ArrayList<OracleRemovedEventResponse> responses = new ArrayList<OracleRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OracleRemovedEventResponse typedResponse = new OracleRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.oracleAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OracleRemovedEventResponse> oracleRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OracleRemovedEventResponse>() {
            @Override
            public OracleRemovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORACLEREMOVED_EVENT, log);
                OracleRemovedEventResponse typedResponse = new OracleRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.oracleAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OracleRemovedEventResponse> oracleRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORACLEREMOVED_EVENT));
        return oracleRemovedEventFlowable(filter);
    }

    public List<OracleReportRemovedEventResponse> getOracleReportRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORACLEREPORTREMOVED_EVENT, transactionReceipt);
        ArrayList<OracleReportRemovedEventResponse> responses = new ArrayList<OracleReportRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OracleReportRemovedEventResponse typedResponse = new OracleReportRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.oracle = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OracleReportRemovedEventResponse> oracleReportRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OracleReportRemovedEventResponse>() {
            @Override
            public OracleReportRemovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORACLEREPORTREMOVED_EVENT, log);
                OracleReportRemovedEventResponse typedResponse = new OracleReportRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.oracle = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OracleReportRemovedEventResponse> oracleReportRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORACLEREPORTREMOVED_EVENT));
        return oracleReportRemovedEventFlowable(filter);
    }

    public List<OracleReportedEventResponse> getOracleReportedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORACLEREPORTED_EVENT, transactionReceipt);
        ArrayList<OracleReportedEventResponse> responses = new ArrayList<OracleReportedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OracleReportedEventResponse typedResponse = new OracleReportedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.oracle = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OracleReportedEventResponse> oracleReportedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OracleReportedEventResponse>() {
            @Override
            public OracleReportedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORACLEREPORTED_EVENT, log);
                OracleReportedEventResponse typedResponse = new OracleReportedEventResponse();
                typedResponse.log = log;
                typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.oracle = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OracleReportedEventResponse> oracleReportedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORACLEREPORTED_EVENT));
        return oracleReportedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<ReportExpirySetEventResponse> getReportExpirySetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REPORTEXPIRYSET_EVENT, transactionReceipt);
        ArrayList<ReportExpirySetEventResponse> responses = new ArrayList<ReportExpirySetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReportExpirySetEventResponse typedResponse = new ReportExpirySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.reportExpiry = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReportExpirySetEventResponse> reportExpirySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReportExpirySetEventResponse>() {
            @Override
            public ReportExpirySetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REPORTEXPIRYSET_EVENT, log);
                ReportExpirySetEventResponse typedResponse = new ReportExpirySetEventResponse();
                typedResponse.log = log;
                typedResponse.reportExpiry = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReportExpirySetEventResponse> reportExpirySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REPORTEXPIRYSET_EVENT));
        return reportExpirySetEventFlowable(filter);
    }

    public RemoteFunctionCall<Boolean> initialized() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INITIALIZED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOracle(String param0, String param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISORACLE, 
                Arrays.<Type>asList(new Address(param0),
                new Address(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> oracles(String param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ORACLES, 
                Arrays.<Type>asList(new Address(param0),
                new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> reportExpirySeconds() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REPORTEXPIRYSECONDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getVersionNumber() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVERSIONNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(BigInteger _reportExpirySeconds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Uint256(_reportExpirySeconds)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setReportExpiry(BigInteger _reportExpirySeconds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREPORTEXPIRY, 
                Arrays.<Type>asList(new Uint256(_reportExpirySeconds)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addOracle(String token, String oracleAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDORACLE, 
                Arrays.<Type>asList(new Address(token),
                new Address(oracleAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeOracle(String token, String oracleAddress, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEORACLE, 
                Arrays.<Type>asList(new Address(token),
                new Address(oracleAddress),
                new Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeExpiredReports(String token, BigInteger n) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEEXPIREDREPORTS, 
                Arrays.<Type>asList(new Address(token),
                new Uint256(n)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<Boolean, String>> isOldestReportExpired(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOLDESTREPORTEXPIRED, 
                Arrays.<Type>asList(new Address(token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple2<Boolean, String>>(function,
                new Callable<Tuple2<Boolean, String>>() {
                    @Override
                    public Tuple2<Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, String>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> report(String token, BigInteger value, String lesserKey, String greaterKey) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REPORT, 
                Arrays.<Type>asList(new Address(token),
                new Uint256(value),
                new Address(lesserKey),
                new Address(greaterKey)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> numRates(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NUMRATES, 
                Arrays.<Type>asList(new Address(token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> medianRate(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MEDIANRATE, 
                Arrays.<Type>asList(new Address(token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>> getRates(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRATES, 
                Arrays.<Type>asList(new Address(token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteFunctionCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        List<String> result0 = convertToNative((List<Address>) results.get(0).getValue());
                        List<BigInteger> result1 = convertToNative((List<Uint256>) results.get(1).getValue());
                        List<BigInteger> result2 = convertToNative((List<Uint8>) results.get(2).getValue());
                        return new Tuple3<>(
                                result0,
                                result1,
                                result2);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> numTimestamps(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NUMTIMESTAMPS, 
                Arrays.<Type>asList(new Address(token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> medianTimestamp(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MEDIANTIMESTAMP, 
                Arrays.<Type>asList(new Address(token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>> getTimestamps(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTIMESTAMPS, 
                Arrays.<Type>asList(new Address(token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteFunctionCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        List<String> result0 = convertToNative((List<Address>) results.get(0).getValue());
                        List<BigInteger> result1 = convertToNative((List<Uint256>) results.get(1).getValue());
                        List<BigInteger> result2 = convertToNative((List<Uint8>) results.get(2).getValue());
                        return new Tuple3<>(
                                result0,
                                result1,
                                result2);
                    }
                });
    }

    public RemoteFunctionCall<List> getOracles(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETORACLES, 
                Arrays.<Type>asList(new Address(token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static SortedOracles load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SortedOracles(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SortedOracles load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SortedOracles(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SortedOracles load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SortedOracles(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SortedOracles load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SortedOracles(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SortedOracles> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SortedOracles.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SortedOracles> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SortedOracles.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SortedOracles> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SortedOracles.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SortedOracles> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SortedOracles.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class MedianUpdatedEventResponse extends BaseEventResponse {
        public String token;

        public BigInteger value;
    }

    public static class OracleAddedEventResponse extends BaseEventResponse {
        public String token;

        public String oracleAddress;
    }

    public static class OracleRemovedEventResponse extends BaseEventResponse {
        public String token;

        public String oracleAddress;
    }

    public static class OracleReportRemovedEventResponse extends BaseEventResponse {
        public String token;

        public String oracle;
    }

    public static class OracleReportedEventResponse extends BaseEventResponse {
        public String token;

        public String oracle;

        public BigInteger timestamp;

        public BigInteger value;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class ReportExpirySetEventResponse extends BaseEventResponse {
        public BigInteger reportExpiry;
    }
}
