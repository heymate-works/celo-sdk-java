package org.celo.contractkit.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class LockedGold extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_INITIALIZED = "initialized";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETREGISTRY = "setRegistry";

    public static final String FUNC_SLASHINGWHITELIST = "slashingWhitelist";

    public static final String FUNC_TOTALNONVOTING = "totalNonvoting";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNLOCKINGPERIOD = "unlockingPeriod";

    public static final String FUNC_ISSLASHER = "isSlasher";

    public static final String FUNC_GETVERSIONNUMBER = "getVersionNumber";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_SETUNLOCKINGPERIOD = "setUnlockingPeriod";

    public static final String FUNC_LOCK = "lock";

    public static final String FUNC_INCREMENTNONVOTINGACCOUNTBALANCE = "incrementNonvotingAccountBalance";

    public static final String FUNC_DECREMENTNONVOTINGACCOUNTBALANCE = "decrementNonvotingAccountBalance";

    public static final String FUNC_UNLOCK = "unlock";

    public static final String FUNC_RELOCK = "relock";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_GETTOTALLOCKEDGOLD = "getTotalLockedGold";

    public static final String FUNC_GETNONVOTINGLOCKEDGOLD = "getNonvotingLockedGold";

    public static final String FUNC_GETACCOUNTTOTALLOCKEDGOLD = "getAccountTotalLockedGold";

    public static final String FUNC_GETACCOUNTNONVOTINGLOCKEDGOLD = "getAccountNonvotingLockedGold";

    public static final String FUNC_GETPENDINGWITHDRAWALS = "getPendingWithdrawals";

    public static final String FUNC_GETTOTALPENDINGWITHDRAWALS = "getTotalPendingWithdrawals";

    public static final String FUNC_GETSLASHINGWHITELIST = "getSlashingWhitelist";

    public static final String FUNC_ADDSLASHER = "addSlasher";

    public static final String FUNC_REMOVESLASHER = "removeSlasher";

    public static final String FUNC_SLASH = "slash";

    public static final Event ACCOUNTSLASHED_EVENT = new Event("AccountSlashed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GOLDLOCKED_EVENT = new Event("GoldLocked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GOLDRELOCKED_EVENT = new Event("GoldRelocked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GOLDUNLOCKED_EVENT = new Event("GoldUnlocked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GOLDWITHDRAWN_EVENT = new Event("GoldWithdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REGISTRYSET_EVENT = new Event("RegistrySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event SLASHERWHITELISTADDED_EVENT = new Event("SlasherWhitelistAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event SLASHERWHITELISTREMOVED_EVENT = new Event("SlasherWhitelistRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event UNLOCKINGPERIODSET_EVENT = new Event("UnlockingPeriodSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected LockedGold(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LockedGold(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LockedGold(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LockedGold(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AccountSlashedEventResponse> getAccountSlashedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTSLASHED_EVENT, transactionReceipt);
        ArrayList<AccountSlashedEventResponse> responses = new ArrayList<AccountSlashedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AccountSlashedEventResponse typedResponse = new AccountSlashedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.slashed = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.reporter = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.penalty = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reward = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccountSlashedEventResponse> accountSlashedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AccountSlashedEventResponse>() {
            @Override
            public AccountSlashedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ACCOUNTSLASHED_EVENT, log);
                AccountSlashedEventResponse typedResponse = new AccountSlashedEventResponse();
                typedResponse.log = log;
                typedResponse.slashed = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.reporter = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.penalty = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.reward = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccountSlashedEventResponse> accountSlashedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTSLASHED_EVENT));
        return accountSlashedEventFlowable(filter);
    }

    public List<GoldLockedEventResponse> getGoldLockedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(GOLDLOCKED_EVENT, transactionReceipt);
        ArrayList<GoldLockedEventResponse> responses = new ArrayList<GoldLockedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            GoldLockedEventResponse typedResponse = new GoldLockedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GoldLockedEventResponse> goldLockedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, GoldLockedEventResponse>() {
            @Override
            public GoldLockedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(GOLDLOCKED_EVENT, log);
                GoldLockedEventResponse typedResponse = new GoldLockedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GoldLockedEventResponse> goldLockedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GOLDLOCKED_EVENT));
        return goldLockedEventFlowable(filter);
    }

    public List<GoldRelockedEventResponse> getGoldRelockedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(GOLDRELOCKED_EVENT, transactionReceipt);
        ArrayList<GoldRelockedEventResponse> responses = new ArrayList<GoldRelockedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            GoldRelockedEventResponse typedResponse = new GoldRelockedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GoldRelockedEventResponse> goldRelockedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, GoldRelockedEventResponse>() {
            @Override
            public GoldRelockedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(GOLDRELOCKED_EVENT, log);
                GoldRelockedEventResponse typedResponse = new GoldRelockedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GoldRelockedEventResponse> goldRelockedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GOLDRELOCKED_EVENT));
        return goldRelockedEventFlowable(filter);
    }

    public List<GoldUnlockedEventResponse> getGoldUnlockedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(GOLDUNLOCKED_EVENT, transactionReceipt);
        ArrayList<GoldUnlockedEventResponse> responses = new ArrayList<GoldUnlockedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            GoldUnlockedEventResponse typedResponse = new GoldUnlockedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.available = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GoldUnlockedEventResponse> goldUnlockedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, GoldUnlockedEventResponse>() {
            @Override
            public GoldUnlockedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(GOLDUNLOCKED_EVENT, log);
                GoldUnlockedEventResponse typedResponse = new GoldUnlockedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.available = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GoldUnlockedEventResponse> goldUnlockedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GOLDUNLOCKED_EVENT));
        return goldUnlockedEventFlowable(filter);
    }

    public List<GoldWithdrawnEventResponse> getGoldWithdrawnEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(GOLDWITHDRAWN_EVENT, transactionReceipt);
        ArrayList<GoldWithdrawnEventResponse> responses = new ArrayList<GoldWithdrawnEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            GoldWithdrawnEventResponse typedResponse = new GoldWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GoldWithdrawnEventResponse> goldWithdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, GoldWithdrawnEventResponse>() {
            @Override
            public GoldWithdrawnEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(GOLDWITHDRAWN_EVENT, log);
                GoldWithdrawnEventResponse typedResponse = new GoldWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GoldWithdrawnEventResponse> goldWithdrawnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GOLDWITHDRAWN_EVENT));
        return goldWithdrawnEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RegistrySetEventResponse> getRegistrySetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTRYSET_EVENT, transactionReceipt);
        ArrayList<RegistrySetEventResponse> responses = new ArrayList<RegistrySetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegistrySetEventResponse typedResponse = new RegistrySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.registryAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RegistrySetEventResponse>() {
            @Override
            public RegistrySetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REGISTRYSET_EVENT, log);
                RegistrySetEventResponse typedResponse = new RegistrySetEventResponse();
                typedResponse.log = log;
                typedResponse.registryAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTRYSET_EVENT));
        return registrySetEventFlowable(filter);
    }

    public List<SlasherWhitelistAddedEventResponse> getSlasherWhitelistAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SLASHERWHITELISTADDED_EVENT, transactionReceipt);
        ArrayList<SlasherWhitelistAddedEventResponse> responses = new ArrayList<SlasherWhitelistAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SlasherWhitelistAddedEventResponse typedResponse = new SlasherWhitelistAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.slasherIdentifier = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SlasherWhitelistAddedEventResponse> slasherWhitelistAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SlasherWhitelistAddedEventResponse>() {
            @Override
            public SlasherWhitelistAddedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SLASHERWHITELISTADDED_EVENT, log);
                SlasherWhitelistAddedEventResponse typedResponse = new SlasherWhitelistAddedEventResponse();
                typedResponse.log = log;
                typedResponse.slasherIdentifier = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SlasherWhitelistAddedEventResponse> slasherWhitelistAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SLASHERWHITELISTADDED_EVENT));
        return slasherWhitelistAddedEventFlowable(filter);
    }

    public List<SlasherWhitelistRemovedEventResponse> getSlasherWhitelistRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SLASHERWHITELISTREMOVED_EVENT, transactionReceipt);
        ArrayList<SlasherWhitelistRemovedEventResponse> responses = new ArrayList<SlasherWhitelistRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SlasherWhitelistRemovedEventResponse typedResponse = new SlasherWhitelistRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.slasherIdentifier = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SlasherWhitelistRemovedEventResponse> slasherWhitelistRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SlasherWhitelistRemovedEventResponse>() {
            @Override
            public SlasherWhitelistRemovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SLASHERWHITELISTREMOVED_EVENT, log);
                SlasherWhitelistRemovedEventResponse typedResponse = new SlasherWhitelistRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.slasherIdentifier = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SlasherWhitelistRemovedEventResponse> slasherWhitelistRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SLASHERWHITELISTREMOVED_EVENT));
        return slasherWhitelistRemovedEventFlowable(filter);
    }

    public List<UnlockingPeriodSetEventResponse> getUnlockingPeriodSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNLOCKINGPERIODSET_EVENT, transactionReceipt);
        ArrayList<UnlockingPeriodSetEventResponse> responses = new ArrayList<UnlockingPeriodSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnlockingPeriodSetEventResponse typedResponse = new UnlockingPeriodSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.period = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnlockingPeriodSetEventResponse> unlockingPeriodSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnlockingPeriodSetEventResponse>() {
            @Override
            public UnlockingPeriodSetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UNLOCKINGPERIODSET_EVENT, log);
                UnlockingPeriodSetEventResponse typedResponse = new UnlockingPeriodSetEventResponse();
                typedResponse.log = log;
                typedResponse.period = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnlockingPeriodSetEventResponse> unlockingPeriodSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNLOCKINGPERIODSET_EVENT));
        return unlockingPeriodSetEventFlowable(filter);
    }

    public RemoteFunctionCall<Boolean> initialized() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INITIALIZED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> registry() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REGISTRY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRegistry(String registryAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREGISTRY, 
                Arrays.<Type>asList(new Address(registryAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> slashingWhitelist(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SLASHINGWHITELIST, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> totalNonvoting() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALNONVOTING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> unlockingPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UNLOCKINGPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isSlasher(String slasher) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSLASHER, 
                Arrays.<Type>asList(new Address(slasher)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getVersionNumber() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVERSIONNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String registryAddress, BigInteger _unlockingPeriod) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Address(registryAddress),
                new Uint256(_unlockingPeriod)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUnlockingPeriod(BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETUNLOCKINGPERIOD, 
                Arrays.<Type>asList(new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> lock(BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LOCK, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> incrementNonvotingAccountBalance(String account, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREMENTNONVOTINGACCOUNTBALANCE, 
                Arrays.<Type>asList(new Address(account),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> decrementNonvotingAccountBalance(String account, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DECREMENTNONVOTINGACCOUNTBALANCE, 
                Arrays.<Type>asList(new Address(account),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unlock(BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLOCK, 
                Arrays.<Type>asList(new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> relock(BigInteger index, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RELOCK, 
                Arrays.<Type>asList(new Uint256(index),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getTotalLockedGold() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTALLOCKEDGOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getNonvotingLockedGold() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNONVOTINGLOCKEDGOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getAccountTotalLockedGold(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACCOUNTTOTALLOCKEDGOLD, 
                Arrays.<Type>asList(new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getAccountNonvotingLockedGold(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACCOUNTNONVOTINGLOCKEDGOLD, 
                Arrays.<Type>asList(new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>> getPendingWithdrawals(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPENDINGWITHDRAWALS, 
                Arrays.<Type>asList(new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        List<BigInteger> result0 = convertToNative((List<Uint256>) results.get(0).getValue());
                        List<BigInteger> result1 = convertToNative((List<Uint256>) results.get(1).getValue());
                        return new Tuple2<>(
                                result0,
                                result1);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getTotalPendingWithdrawals(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTALPENDINGWITHDRAWALS, 
                Arrays.<Type>asList(new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getSlashingWhitelist() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSLASHINGWHITELIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> addSlasher(String slasherIdentifier) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDSLASHER, 
                Arrays.<Type>asList(new Utf8String(slasherIdentifier)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeSlasher(String slasherIdentifier, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVESLASHER, 
                Arrays.<Type>asList(new Utf8String(slasherIdentifier),
                new Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> slash(String account, BigInteger penalty, String reporter, BigInteger reward, List<String> lessers, List<String> greaters, List<BigInteger> indices) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SLASH, 
                Arrays.<Type>asList(new Address(account),
                new Uint256(penalty),
                new Address(reporter),
                new Uint256(reward),
                new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(lessers, Address.class)),
                new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(greaters, Address.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(indices, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static LockedGold load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LockedGold(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LockedGold load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LockedGold(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LockedGold load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LockedGold(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LockedGold load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LockedGold(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<LockedGold> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LockedGold.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LockedGold> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LockedGold.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<LockedGold> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LockedGold.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LockedGold> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LockedGold.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class AccountSlashedEventResponse extends BaseEventResponse {
        public String slashed;

        public String reporter;

        public BigInteger penalty;

        public BigInteger reward;
    }

    public static class GoldLockedEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger value;
    }

    public static class GoldRelockedEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger value;
    }

    public static class GoldUnlockedEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger value;

        public BigInteger available;
    }

    public static class GoldWithdrawnEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger value;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RegistrySetEventResponse extends BaseEventResponse {
        public String registryAddress;
    }

    public static class SlasherWhitelistAddedEventResponse extends BaseEventResponse {
        public byte[] slasherIdentifier;
    }

    public static class SlasherWhitelistRemovedEventResponse extends BaseEventResponse {
        public byte[] slasherIdentifier;
    }

    public static class UnlockingPeriodSetEventResponse extends BaseEventResponse {
        public BigInteger period;
    }
}
